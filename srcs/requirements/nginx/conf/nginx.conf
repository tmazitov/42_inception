#Create a new configuration block for the server. This is where the settings for one specific website begin
server {
    #Tell the server to listen on port 443 with SSL encryption. This is necessary for a secure connection
    listen      443 ssl;
    #Set the domain names of the server. These are the addresses you can go to in order to get to this website
    server_name  tmazitov.42.fr www.tmazitov.42.fr;
    #Specify where the files of this website will be stored on the server. This is the "home folder" of the site
    root    /var/www/;
    #Set the file that will be opened when someone goes to the site. In this case it is index.php
    index index.php;
    #Specify where the SSL certificate is located. This file confirms that your site is really what it claims to be.
    ssl_certificate     /etc/nginx/ssl/tmazitov.42.fr.crt;
    #Specify where the key for the SSL certificate is located. It is needed to establish a secure connection
    ssl_certificate_key /etc/nginx/ssl/tmazitov.42.fr.key;
    #Specify which versions of the security protocol to use. This determines how strong the protection will be
    ssl_protocols       TLSv1.2 TLSv1.3;
    #Set how long a client can use the same SSL connection. This is done for optimization and security
    ssl_session_timeout 10m;
    #Set how long the server will wait for new data on an already open connection before closing it down
    keepalive_timeout 70;
    #Open the block to configure the root path of the site. This is the default path that will be processed.
    location / {
        #Specify what files to look for when someone goes to your site
        #Try to find a file that matches the query, or pass the query to index.php 
        try_files $uri /index.php?$args;
        #Add the last modification time of this resource to the server response. This can be useful for caching
        add_header Last-Modified $date_gmt;
        #Set caching rules so that users' browsers don't save old versions of files
        add_header Cache-Control 'no-store, no-cache';
        #Disable the ability to use the If-Modified-Since header
        #This is to prevent the browser from asking if the file has changed since the last visit
        if_modified_since off;
        #Disable headers that may allow a file to be cached permanently. This is done to control file versions
        expires off;
        #Disable ETag, another caching mechanism, to fully control client-side caching
        etag off;
    }
    #Open the block for processing files with the .php extension. 
    #Here we configure how the server will process PHP scripts.
    location ~ \.php$ {
        #Split the URL into two parts: the PHP script and additional parameters. 
        #This is necessary for the scripts to work correctly
        fastcgi_split_path_info ^(.+\.php)(/.+)$;
        #Transfer PHP script processing to another server. 
        #In this case it is a server named wordpress and port 9000
        fastcgi_pass wordpress:9000;
        #Specify which file to consider as the main page for PHP
        fastcgi_index index.php;
        #Add a standard set of parameters for FastCGI. 
        #This is necessary for PHP to work correctly on the server
        include fastcgi_params;
        #Specify the full path to the PHP script to be processed. 
        #This is necessary so that the server knows which file to run
        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        #Pass additional parameters from the URL to the PHP script. 
        #This necessary to process the request on the server side
        fastcgi_param PATH_INFO $fastcgi_path_info;
    }
}