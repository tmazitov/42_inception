# This file defines the configuration for three services: nginx, mariadb and wordpress

# Version of the Docker Compose syntax. This is done to ensure compatibility
version: '3'

# Start describing the services that will be included in this configuration
services:
  # This is a web server that will accept HTTP requests and redirect them to WordPress
  nginx:
    image: nginx
    build:
      context: .
      dockerfile: requirements/nginx/Dockerfile
    container_name: nginx
    # nginx should start after the wordpress service in order to redirect traffic correctly
    depends_on:
      - wordpress
    # Redirect the 443 port of the host to the 443 port in the container
    ports:
      - "443:443"
    # The service will be on the inception network
    networks:
      - inception
    # This is where we mount the folder to store the site files
    volumes:
      - wp-volume:/var/www/
    # Restarts the container on failure
    restart: on-failure

  # This is the database that will be used by WordPress to store data
  mariadb:
    image: mariadb
    build:
      context: .
      dockerfile: requirements/mariadb/Dockerfile
      # These variables will be used to initialize the database
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
    container_name: mariadb
    networks:
      - inception
    volumes:
      - db-volume:/var/lib/mysql
    restart: on-failure

  # This is the main application we're running
  wordpress:
    image: wordpress
    build:
      context: .
      dockerfile: requirements/wordpress/Dockerfile
      args:
        DB_NAME: ${DB_NAME}
        DB_USER: ${DB_USER}
        DB_PASS: ${DB_PASS}
        DB_ROOT: ${DB_ROOT}
        WP_ADUSER: ${WP_ADUSER}
        WP_ADPASS: ${WP_ADPASS}
        WP_ADEMAIL: ${WP_ADEMAIL}
        WP_USER1: ${WP_USER1}
        WP_PASS1: ${WP_PASS1}
        WP_EMAIL1: ${WP_EMAIL1}
    container_name: wordpress
    depends_on:
      - mariadb
    networks:
      - inception
    volumes:
      - wp-volume:/var/www/
    restart: on-failure
    # The variables that will be used inside the container are stored here
    env_file:
      - ./.env

# Define a block to define the volumes that will be used in our containers. 
# Volumes are needed to preserve data outside of the container lifecycle. 
# This is useful, for example, if the container falls over, the data will remain intact
volumes:
  wp-volume:
    # Define additional parameters for the volume driver. 
    # This allows us to configure how exactly volumes will work
    driver_opts:
      # Set the "bind" option, which allows you to bind a specific folder on the host machine to a volume. 
      # This is done in order to easily exchange data between the host and the container
      o: bind
      # Set the volume type to "none", which means that we will not use any 
      # additional features specific to any volume driver type
      type: none
      # Specify the paths on the host machine that will be associated with our volumes. 
      # This means that all data that will go into these volumes in containers will actually 
      # be stored in these directories on the host machine
      device: /home/${USER}/data/wordpress

  # Set the name for our volumes. It will be used in MariaDB container. 
  db-volume:
    driver_opts:
      o: bind
      type: none
      device: /home/${USER}/data/mariadb

# Begin the network description block to set the network configuration settings for our containers. 
# This is necessary to manage the relationships between containers and define how they will 
# communicate with each other and with the outside world. 
# With this block, we can create our own isolated network that will only contain certain containers. 
# This improves security and allows us to manage network settings more finely
networks:
    # Create a network named inception
    inception:
        # Specify that we will use the standard Docker bridge driver
        # A bridge-type network provides a separate namespace, which provides container isolation. 
        # Each container in such a network has its own internal IP address
        # Bridge allows containers on the same LAN to communicate with each other
        driver: bridge